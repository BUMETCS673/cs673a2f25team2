<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.health.mapper.RoleMapper">

    <resultMap id="RoleResultMap" type="com.example.health.domain.Role">
        <id column="id" property="id" />
        <result column="name" property="name" />
        <result column="description" property="description" />
        <result column="created_at" property="createdAt" />
        <collection property="permissions" ofType="com.example.health.domain.Permission">
            <id column="permission_id" property="id" />
            <result column="permission_name" property="name" />
            <result column="permission_description" property="description" />
            <result column="resource" property="resource" />
            <result column="action" property="action" />
            <result column="permission_created_at" property="createdAt" />
        </collection>
    </resultMap>

    <select id="findById" parameterType="long" resultMap="RoleResultMap">
        SELECT r.id, r.name, r.description, r.created_at,
               p.id as permission_id, p.name as permission_name, p.description as permission_description,
               p.resource, p.action, p.created_at as permission_created_at
        FROM roles r
        LEFT JOIN role_permissions rp ON r.id = rp.role_id
        LEFT JOIN permissions p ON rp.permission_id = p.id
        WHERE r.id = #{id}
    </select>

    <select id="findByName" parameterType="string" resultMap="RoleResultMap">
        SELECT r.id, r.name, r.description, r.created_at,
               p.id as permission_id, p.name as permission_name, p.description as permission_description,
               p.resource, p.action, p.created_at as permission_created_at
        FROM roles r
        LEFT JOIN role_permissions rp ON r.id = rp.role_id
        LEFT JOIN permissions p ON rp.permission_id = p.id
        WHERE r.name = #{name}
    </select>

    <select id="findAll" resultType="com.example.health.domain.Role">
        SELECT id, name, description, created_at
        FROM roles
        ORDER BY name
    </select>

    <select id="findByUserId" parameterType="long" resultType="com.example.health.domain.Role">
        SELECT r.id, r.name, r.description, r.created_at
        FROM roles r
        INNER JOIN user_roles ur ON r.id = ur.role_id
        WHERE ur.user_id = #{userId}
    </select>

    <select id="findPermissionsByRoleId" parameterType="long" resultType="com.example.health.domain.Permission">
        SELECT p.id, p.name, p.description, p.resource, p.action, p.created_at
        FROM permissions p
        INNER JOIN role_permissions rp ON p.id = rp.permission_id
        WHERE rp.role_id = #{roleId}
    </select>

    <insert id="insert" parameterType="com.example.health.domain.Role" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO roles (name, description, created_at)
        VALUES (#{name}, #{description}, #{createdAt})
    </insert>

    <update id="update" parameterType="com.example.health.domain.Role">
        UPDATE roles 
        SET name = #{name},
            description = #{description}
        WHERE id = #{id}
    </update>

    <delete id="deleteById" parameterType="long">
        DELETE FROM roles WHERE id = #{id}
    </delete>

    <insert id="assignRoleToUser">
        INSERT INTO user_roles (user_id, role_id, created_at)
        VALUES (#{userId}, #{roleId}, datetime('now'))
    </insert>

    <delete id="removeRoleFromUser">
        DELETE FROM user_roles 
        WHERE user_id = #{userId} AND role_id = #{roleId}
    </delete>

    <insert id="assignPermissionToRole">
        INSERT INTO role_permissions (role_id, permission_id, created_at)
        VALUES (#{roleId}, #{permissionId}, datetime('now'))
    </insert>

    <delete id="removePermissionFromRole">
        DELETE FROM role_permissions 
        WHERE role_id = #{roleId} AND permission_id = #{permissionId}
    </delete>

</mapper>
